@model IEnumerable<Inmobiliaria_Rios.Models.Contrato>

@{
    ViewData["Title"] = "Contratos";
    var usuarios = ViewBag.Usuarios as IEnumerable<Inmobiliaria_Rios.Models.Usuario>;
}
<style>
    #lead-text-secondary {
        color: black;
        font: sans-serif;
        font-size: 2.50rem;
        text-align: center;
        margin-top: 10px;
        margin-bottom: 10px;
    }
    #display-4-text-primary {
        font-family: 'Playfair Display', serif;
        color: #333333;
        font-size: 3.50rem;
        font-weight: bold;
        text-align: center;
        margin-top: 10px;
        margin-bottom: 10px;
    }
</style>

<div class="text-center page-title-container">
    <h1 class="display-4-text-primary">Contratos</h1>
    
    @if (TempData["Mensaje"] != null)
    {
        <div class="alert alert-success show custom-alert" role="alert" id="alertaMensaje">
            @TempData["Mensaje"]
        </div>
    }
</div>

<div class="row mb-2 align-items-center">
    <div class="col-md-3 col-sm-6">
        <div class="search-container">
            <span class="search-icon"><i class="bi bi-search"></i></span>
            <input type="text" id="searchInput" class="search-input" placeholder="Buscar...">
        </div>
    </div>
    <div class="col-md-3 col-sm-6 ms-auto">
        <a href="@Url.Action("NuevoContrato", "Contratos")" class="btn btn-success btn-sm px-4 py-2 d-flex align-items-center justify-content-center">
            <i class="bi bi-plus-circle me-2"></i>
            <span>Nuevo Contrato</span>
        </a>
    </div>
</div>

<div class="table-responsive modern-table-container" style="max-height: 400px; overflow-y: auto;">
    <table class="table table-hover modern-table">
        <thead>
            <tr>
                <th>Inmueble</th>
                <th>Cliente</th>
                <th>Fecha Inicio</th>
                <th>Fecha Fin</th>
                <th>Fecha Fin Anticipada</th>
                <th>Monto Mensual</th>
                <th>Multa</th>
                <th>Estado</th>
                <th>Usuario Creación</th>
                <th>Fecha Creación</th>
                <th>Usuario Modificación</th>
                <th>Fecha Modificación</th>
            </tr>
        </thead>
        <tbody id="tableBody">
            @foreach (var contrato in Model)
            {
                <tr class="align-middle" style="cursor: pointer;" onclick="window.location.href='@Url.Action("EditarContrato", "Contratos", new { id = contrato.Id })'">
                    @* IDs ocultos, no se muestran en la tabla *@
                    @* <td style="display:none;">@contrato.Id</td> *@
                    @* <td style="display:none;">@contrato.IdInmuebles</td> *@
                    @* <td style="display:none;">@contrato.IdClientes</td> *@
                    <td>
                        @* Inmueble *@
                        @{
                            string descInmueble = contrato.IdInmuebles.ToString();
                            if (ViewBag.Inmuebles != null)
                            {
                                var inmuebles = ViewBag.Inmuebles as IEnumerable<Inmobiliaria_Rios.Models.Propiedad>;
                                var inmueble = inmuebles?.FirstOrDefault(i => i.Id == contrato.IdInmuebles);
                                if (inmueble != null)
                                {
                                    descInmueble = inmueble.Direccion + " - " + inmueble.Localidad + " - " + inmueble.Provincia;
                                }
                            }
                        }
                        <span data-bs-toggle="tooltip" title="@descInmueble">
                            @descInmueble
                        </span>
                    </td>
                    <td>
                        @* Cliente: solo muestra el nombre y apellido, sin card ni onclick ni estilos especiales *@
                        @{
                            string nombreCliente = contrato.IdClientes.ToString();
                            if (ViewBag.Clientes != null)
                            {
                                var clientes = ViewBag.Clientes as IEnumerable<Inmobiliaria_Rios.Models.Cliente>;
                                var cliente = clientes?.FirstOrDefault(c => c.Id == contrato.IdClientes);
                                if (cliente != null)
                                {
                                    nombreCliente = cliente.Nombre + " " + cliente.Apellido;
                                }
                            }
                        }
                        @nombreCliente
                    </td>
                    <td>@contrato.FechaInicio.ToShortDateString()</td>
                    <td>@contrato.FechaFin.ToShortDateString()</td>
                    <td>
                        @(contrato.FechaFinAnticipada.HasValue 
                            ? contrato.FechaFinAnticipada.Value.ToShortDateString() 
                            : "-")
                    </td>
                    <td>@contrato.MontoMensual.ToString("C")</td>
                    <td>
                        @(contrato.Multa.HasValue 
                            ? contrato.Multa.Value.ToString("C") 
                            : "-")
                    </td>
                    <td>
                        @(contrato.Estado ? "Activo" : "Inactivo")
                    </td>
                    <td>
                        @{
                            // Mostrar nombre y apellido del usuario de creación
                            string usuarioCreacion = "-";
                            if (ViewBag.Usuarios != null)
                            {
                                var usuariosList = ViewBag.Usuarios as IEnumerable<Inmobiliaria_Rios.Models.Usuario>;
                                var usuario = usuariosList?.FirstOrDefault(u => u.Idusuarios == contrato.UsuarioCreacionId);
                                if (usuario != null)
                                {
                                    usuarioCreacion = usuario.Nombre + " " + usuario.Apellido;
                                }
                            }
                        }
                        @usuarioCreacion
                    </td>
                    <td>
                        @{
                            var propFechaCreacion = contrato.GetType().GetProperty("FechaCreacion");
                            var valFechaCreacion = propFechaCreacion?.GetValue(contrato, null);
                        }
                        @(valFechaCreacion is DateTime fechaCreacion ? fechaCreacion.ToString("g") : "-")
                    </td>
                    <td>
                        @{
                            // Mostrar nombre y apellido del usuario de modificación
                            string usuarioMod = "-";
                            if (ViewBag.Usuarios != null)
                            {
                                var usuariosList = ViewBag.Usuarios as IEnumerable<Inmobiliaria_Rios.Models.Usuario>;
                                // Usa el campo correcto según tu modelo, por ejemplo "UsuarioModificacionId" o "UsuarioModificacion"
                                int? usuarioModId = null;
                                var propUsuarioMod = contrato.GetType().GetProperty("UsuarioModificacionId");
                                if (propUsuarioMod != null)
                                {
                                    var valUsuarioMod = propUsuarioMod.GetValue(contrato, null);
                                    if (valUsuarioMod != null && int.TryParse(valUsuarioMod.ToString(), out int id))
                                    {
                                        usuarioModId = id;
                                    }
                                }
                                if (usuarioModId.HasValue)
                                {
                                    var usuario = usuariosList?.FirstOrDefault(u => u.Idusuarios == usuarioModId.Value);
                                    if (usuario != null)
                                    {
                                        usuarioMod = usuario.Nombre + " " + usuario.Apellido;
                                    }
                                }
                            }
                        }
                        @usuarioMod
                    </td>
                    <td>
                        @{
                            var propFechaMod = contrato.GetType().GetProperty("FechaModificacion");
                            var valFechaMod = propFechaMod?.GetValue(contrato, null);
                        }
                        @(valFechaMod is DateTime fechaMod ? fechaMod.ToString("g") : "-")
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@* Se eliminó el formulario para crear un nuevo contrato *@

<style>
    .search-container {
        position: relative;
        background: linear-gradient(145deg, #ffffff, #f0f0f0);
        border-radius: 8px;
        padding: 2px;
        box-shadow: 2px 2px 8px rgba(0,0,0,0.1),
                   -2px -2px 8px rgba(255,255,255,0.8);
        margin-bottom: 10px;
    }
    .search-input {
        width: 100%;
        padding: 6px 30px;
        border: none;
        background: transparent;
        font-size: 0.85rem;
        color: #333;
        outline: none;
        height: 32px;
    }
    .search-icon {
        position: absolute;
        left: 8px;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
        font-size: 0.85rem;
    }
    @@media screen and (max-width: 768px) {
        .search-container { margin-bottom: 8px; }
        .search-input { padding: 4px 25px; font-size: 0.8rem; height: 28px; }
        .search-icon { left: 6px; font-size: 0.8rem; }
    }
    .modern-table-container {
        background: linear-gradient(145deg, #ffffff, #f5f5f5);
        border-radius: 20px;
        padding: 20px;
        box-shadow: 10px 10px 20px rgba(0,0,0,0.05),
                    -10px -10px 20px rgba(255,255,255,0.8);
        max-height: 400px;
        overflow-y: auto;
    }

    .modern-table-container::-webkit-scrollbar {
        width: 8px;
    }

    .modern-table-container::-webkit-scrollbar-thumb {
        background-color: #28a745;
        border-radius: 4px;
    }

    .modern-table-container::-webkit-scrollbar-track {
        background-color: #f1f1f1;
    }

    .modern-table {
        border-collapse: separate;
        border-spacing: 0;
        width: 100%;
        border: none;
        font-size: 0.85rem;
    }
    .modern-table thead th {
        background: linear-gradient(145deg, #28a745, #20c997);
        color: white;
        font-weight: 500;
        padding: 8px;
        text-transform: uppercase;
        font-size: 0.75rem;
        letter-spacing: 0.5px;
        border: none;
        white-space: nowrap;
    }
    .modern-table thead th:first-child { border-top-left-radius: 15px; }
    .modern-table thead th:last-child { border-top-right-radius: 15px; }
    .modern-table tbody tr {
        background: linear-gradient(145deg, #ffffff, #f8f9fa);
        transition: all 0.3s ease;
    }
    .modern-table tbody tr:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }
    .modern-table td {
        padding: 6px 8px;
        border: none;
        border-bottom: 1px solid #e9ecef;
        white-space: nowrap;
        max-width: 150px;
        overflow: hidden;
        text-overflow: ellipsis;
    }
    .custom-alert {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 1050;
        width: auto;
        min-width: 300px;
        max-width: 90%;
        text-align: center;
        padding: 15px 30px;
        margin: 0;
        font-size: 1.1rem;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        background-color: #d4edda;
        border-color: #c3e6cb;
        color: #155724;
        border-radius: 8px;
    }
</style>

<script>
    document.getElementById('searchInput').addEventListener('keyup', function() {
        let searchText = this.value.toLowerCase();
        let rows = document.querySelectorAll('.modern-table tbody tr');
        rows.forEach(row => {
            row.style.display = row.textContent.toLowerCase().includes(searchText) ? '' : 'none';
        });
    });

    // Auto cerrar alerta después de 3 segundos
    document.addEventListener('DOMContentLoaded', function () {
        let alerta = document.getElementById('alertaMensaje');
        if (alerta) {
            setTimeout(function () {
                alerta.style.display = 'none';
            }, 3000);
        }
    });

    // Inicializar tooltips de Bootstrap para cliente e inmueble
    document.addEventListener('DOMContentLoaded', function () {
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.forEach(function (tooltipTriggerEl) {
            new bootstrap.Tooltip(tooltipTriggerEl);
        });
    });
</script>
